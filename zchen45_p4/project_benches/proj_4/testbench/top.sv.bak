`timescale 1ns / 10ps

module top();

parameter int WB_ADDR_WIDTH = 2;
parameter int WB_DATA_WIDTH = 8;
parameter int I2C_ADDR_WIDTH = 8;
parameter int I2C_DATA_WIDTH = 8;
parameter int NUM_I2C_SLAVES = 1;

bit  clk;
bit  rst = 1'b1;
wire cyc;
wire stb;
wire we;
tri1 ack;
wire [WB_ADDR_WIDTH-1:0] adr;
wire [WB_DATA_WIDTH-1:0] dat_wr_o;
wire [WB_DATA_WIDTH-1:0] dat_rd_i;
wire irq;
triand  [NUM_I2C_SLAVES-1:0] scl;
triand  [NUM_I2C_SLAVES-1:0] sda;

int op;
bit [I2C_DATA_WIDTH-1:0] write_data [];
bit [I2C_DATA_WIDTH-1:0] read_data [1];

bit sda_o;
reg scl_o;


initial
	begin
		foreach(read_data[i]) begin
			read_data[i] = i + 100;
		end
	end


// ****************************************************************************
// Clock generator
initial
	begin
		clk = 1'b0;
		forever #5 clk = ~clk;
	end
/*
// ****************************************************************************
// moniter
initial
	begin

	end
*/
// ****************************************************************************
// wait for i2c transfer

initial
	begin

		forever begin
			@(posedge clk)	begin
				i2c_bus.wait_for_i2c_transfer(op, write_data);
				if(op == 1) begin
//					$display("time: %0t, READ", $time);
					i2c_bus.provide_read_data(read_data);
				end
			end
		end

	end


// ****************************************************************************
// test flow

initial
	begin
		int x, y;
/*
//write 32 incrementing values from 0 to 31
		@(posedge clk);
		@(posedge clk);
		@(posedge clk);
		@(posedge clk);

		start;
		sig_addr_gen(7'b0000000, 1'b0);
		for(int i = 0; i <= 31; i++) begin
			send_byte(i);
		end
		stop;

		x = write_data.size();
		while(y <= x - 1) begin
			$display("OUTPUT: [%d], VALUE: %d", y, write_data[y]);
			y = y + 1;
		end
		y = 0;

//read 32 values from 100 to 131
		@(posedge clk);
		@(posedge clk);
		@(posedge clk);
		@(posedge clk);

		start;
		sig_addr_gen(7'b0000000, 1'b1);
		read_byte_ack(32);
		stop;

		$finish;
*/
		

		int x, y;

		@(posedge clk);
		@(posedge clk);
		@(posedge clk);
		@(posedge clk);

		start;
		sig_addr_gen(7'b0000000, 1'b1);
		read_byte_ack(1);
		stop;

		@(posedge clk);
		@(posedge clk);
		@(posedge clk);
		@(posedge clk);

		start;
		sig_addr_gen(7'b0000000, 1'b0);
		send_byte(8'b00111110);
		send_byte(8'b00001110);
		stop;

		x = write_data.size();
		while(y <= x - 1) begin
			$display("OUTPUT: [%d], %b, size: %d", y, write_data[y], x);
			y = y + 1;
		end
		y = 0;

		$finish;

	end


assign sda = sda_o?1'bz:1'b0;
assign scl = scl_o;

task start;
	@(posedge clk);
	sda_o = 1;
	scl_o = 1;
	@(posedge clk);
	sda_o = 0;
	@(posedge clk);
	scl_o = 0;		
endtask

task sig_addr_gen(
	input bit [6:0] slave_addr,
	input bit rw
);
	repeat(7) begin
		@(posedge clk);
		sda_o = slave_addr[6];
		slave_addr = {slave_addr[5:0], slave_addr[6]};
		@(posedge clk);
		scl_o = 1;
		@(posedge clk);
		@(posedge clk);
		scl_o = 0;
	end
	@(posedge clk);
	sda_o = rw;
	@(posedge clk);
	scl_o = 1;
	@(posedge clk);
	@(posedge clk);
	scl_o = 0;

	@(posedge clk);
	sda_o = 1;
	@(posedge clk);
	scl_o = 1;
	@(posedge clk);
	if(sda != 0) $display("time: %0t, ACK ERROR WITH ADDR", $time);
	@(posedge clk);
	scl_o = 0;
	@(posedge clk);
	sda_o = 0;
	@(posedge clk);
	
	
endtask

task send_byte(
	input bit [7:0] send_byte
);
	repeat(8) begin
		@(posedge clk);
		sda_o = send_byte[7];
		send_byte = {send_byte[6:0], send_byte[7]};
		@(posedge clk);
		scl_o = 1;
		@(posedge clk);
		@(posedge clk);
		scl_o = 0;
	end
	@(posedge clk);
	sda_o = 1;
	@(posedge clk);
	scl_o = 1;
	@(posedge clk);
	if(sda != 0) $display("time: %0t, ACK ERROR WITH DATA", $time);
	@(posedge clk);
	scl_o = 0;
	@(posedge clk)
	sda_o = 0;
	@(posedge clk);
	
endtask

task read_byte_ack(
	input int i
);
	repeat(i - 1) begin
		repeat(8) begin
			@(posedge clk);
			sda_o = 1;
			@(posedge clk);
			scl_o = 1;
			@(posedge clk);
			@(posedge clk);
			scl_o = 0;
		end
		
		@(posedge clk);
		sda_o = 0;
		@(posedge clk);
		scl_o = 1;
		@(posedge clk);
		@(posedge clk);
		scl_o = 0;
		sda_o = 1;
		@(posedge clk);
	end

	repeat(8) begin
		@(posedge clk);
		sda_o = 1;
		@(posedge clk);
		scl_o = 1;
		@(posedge clk);
		@(posedge clk);
		scl_o = 0;
	end

	@(posedge clk);
	sda_o = 1;
	@(posedge clk);
	scl_o = 1;
	@(posedge clk);
	@(posedge clk);
	scl_o = 0;
	sda_o = 1;
	@(posedge clk);	
endtask



task read_byte;
	repeat(8) begin
		@(posedge clk);
		sda_o = 1;
		@(posedge clk);
		scl_o = 1;
		@(posedge clk);
		@(posedge clk);
		scl_o = 0;
	end
endtask

task read_ack(
	input bit ack
);
	@(posedge clk);
	sda_o = ack;
	@(posedge clk);
	scl_o = 1;
	@(posedge clk);
	@(posedge clk);
	scl_o = 0;
	sda_o = 1;
	@(posedge clk);
	
endtask

task stop;
	@(posedge clk);
	sda_o = 0;
	@(posedge clk);
	scl_o = 1;
	@(posedge clk);
	sda_o = 1;
	@(posedge clk);
	scl_o = 1;
endtask
	
// ****************************************************************************
// Instantiate the I2C Model
i2c_if #(
	.I2C_DATA_WIDTH(8),
	.I2C_ADDR_WIDTH(8)
) i2c_bus
(
	.scl(scl),
	.sda(sda)
);

// ****************************************************************************
// Instantiate the DUT - I2C Multi-Bus Controller
\work.iicmb_m_wb(str) #(.g_bus_num(NUM_I2C_SLAVES)) DUT
  (
    // ------------------------------------
    // -- Wishbone signals:sim:/top/DUT/scl_i

    .clk_i(clk),         // in    std_logic;                            -- Clock
    .rst_i(rst),         // in    std_logic;                            -- Synchronous reset (active high)
    // -------------
    .cyc_i(cyc),         // in    std_logic;                            -- Valid bus cycle indication
    .stb_i(stb),         // in    std_logic;                            -- Slave selection
    .ack_o(ack),         //   out std_logic;                            -- Acknowledge output
    .adr_i(adr),         // in    std_logic_vector(1 downto 0);         -- Low bits of Wishbone address
    .we_i(we),           // in    std_logic;                            -- Write enable
    .dat_i(dat_wr_o),    // in    std_logic_vector(7 downto 0);         -- Data input
    .dat_o(dat_rd_i),    //   out std_logic_vector(7 downto 0);         -- Data output
    // ------------------------------------
    // ------------------------------------
    // -- Interrupt request:
    .irq(irq),           //   out std_logic;                            -- Interrupt request
    // ------------------------------------
    // ------------------------------------
    // -- I2C interfaces:
    .scl_i(scl),         // in    std_logic_vector(0 to g_bus_num - 1); -- I2C Clock inputs
    .sda_i(sda),         // in    std_logic_vector(0 to g_bus_num - 1); -- I2C Data inputs
    .scl_o(scl),         //   out std_logic_vector(0 to g_bus_num - 1); -- I2C Clock outputs
    .sda_o(sda)          //   out std_logic_vector(0 to g_bus_num - 1)  -- I2C Data outputs
    // ------------------------------------
  );


endmodule
